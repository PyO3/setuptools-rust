name: CI
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name:  ${{ matrix.python-version }} ${{ matrix.platform.os }}-${{ matrix.platform.python-architecture }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false  # If one platform fails, allow the rest to keep testing.
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, pypy3]
        platform: [
          { os: "macos-latest",   python-architecture: "x64", rust-target: "x86_64-apple-darwin" },
          { os: "ubuntu-latest", python-architecture: "x64", rust-target: "x86_64-unknown-linux-gnu" },
          { os: "windows-latest", python-architecture: "x64", rust-target: "x86_64-pc-windows-msvc" },
          { os: "windows-latest", python-architecture: "x86", rust-target: "i686-pc-windows-msvc" },
        ]
        exclude:
          # No 64-bit pypy on windows
          - python-version: pypy3
            platform: { os: "windows-latest", python-architecture: "x64" }
          # Example rust_with_cffi broken on Python 3.5 for Windows, never mind!
          - python-version: 3.5
            platform: { os: "windows-latest" }

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.python-architecture }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.rust-target }}
          profile: minimal
          default: true

      - name: Install Rust aarch64-apple-darwin target
        if: matrix.platform.os == 'macos-latest'
        run: rustup target add aarch64-apple-darwin

      - name: Install test dependencies
        run: pip install --upgrade tox setuptools

      - name: Build package
        run: pip install -e .

      - name: Test examples
        if: matrix.python-version != 'pypy3'
        shell: bash
        env:
          PYTHON: ${{ matrix.python-version }}
        run: |
          for example_dir in examples/*; do
              tox -c $example_dir -e py
          done

      - name: Test examples (pypy)
        # FIXME: issues with tox + pypy + windows
        if: matrix.python-version == 'pypy3' && matrix.platform.os != 'windows-latest'
        shell: bash
        run: |
          for example_dir in examples/*; do
              if [[ $example_dir = "examples/html-py-ever" ]]; then
              echo "skipping html-py-ever on pypy3 - lxml is hard to build from source"
              continue
              fi

              tox -c $example_dir -e py -vvvv
          done

      - name: Test macOS universal2
        if: matrix.platform.os == 'macos-latest'
        shell: bash
        env:
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          MACOSX_DEPLOYMENT_TARGET: '10.9'
          ARCHFLAGS: -arch x86_64 -arch arm64
          PYO3_CROSS_LIB_DIR: /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/lib
        run: |
          cd examples/namespace_package
          pip install wheel
          python setup.py bdist_wheel
          ls -l dist/
          pip install --force-reinstall dist/namespace_package*_universal2.whl
          cd -
          python -c "from namespace_package import rust; assert rust.rust_func() == 14"
          python -c "from namespace_package import python; assert python.python_func() == 15"

      - name: Test sdist vendor Rust crates
        shell: bash
        run: |
          cd examples/namespace_package
          python setup.py sdist --vendor-crates
          cd dist
          tar -zxf namespace_package-0.1.0.tar.gz
          cd namespace_package-0.1.0
          cargo build --offline --target ${{ matrix.platform.rust-target }}

  test-abi3:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@master
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install Rust aarch64-apple-darwin target
        if: matrix.os == 'macos-latest'
        run: rustup target add aarch64-apple-darwin

      - name: Build package
        run: pip install -e .

      - name: Build an abi3 wheel
        shell: bash
        run: |
          cd examples/rust_with_cffi/
          python --version
          pip install wheel
          python setup.py bdist_wheel --py-limited-api=cp36
          ls -la dist/

      # Now we switch to a differnet Python version and ensure we can install
      # the wheel we just built.
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install abi3 wheel and run tests
        shell: bash
        run: |
          cd examples/
          python --version
          pip install rust_with_cffi/dist/rust_with_cffi*.whl
          python -c "from rust_with_cffi import rust; assert rust.rust_func() == 14"
          python -c "from rust_with_cffi.cffi import lib; assert lib.cffi_func() == 15"

  test-cross:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install cross
        run: cargo install cross
      - name: Build package
        run: pip install -e .
      - name: Build wheel using cross
        shell: bash
        env:
          CARGO: cross
          CARGO_BUILD_TARGET: aarch64-unknown-linux-gnu
          PYO3_CROSS_LIB_DIR: /opt/python/cp38-cp38/lib
        run: |
          cd examples/namespace_package
          docker build -t cross-pyo3:aarch64-unknown-linux-gnu .
          python -m pip install wheel
          python setup.py bdist_wheel --plat-name manylinux2014_aarch64
          ls -la dist/
      - uses: uraimo/run-on-arch-action@v2.0.5
        name: Install built wheel
        with:
          arch: aarch64
          distro: ubuntu20.04
          dockerRunArgs: |
            --volume "${PWD}/examples/namespace_package:/io"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            pip3 install namespace_package --no-index --find-links /io/dist/ --force-reinstall
            python3 -c "from namespace_package import rust; assert rust.rust_func() == 14"
            python3 -c "from namespace_package import python; assert python.python_func() == 15"
